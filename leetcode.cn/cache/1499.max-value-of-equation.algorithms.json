{"id":1622,"fid":"1499","name":"满足不等式的最大值","slug":"max-value-of-equation","link":"https://leetcode-cn.com/problems/max-value-of-equation/description/","percent":37.96850742958527,"level":"Hard","category":"algorithms","totalAC":"1.7K","totalSubmit":"4.5K","likes":19,"dislikes":0,"desc":"<p>给你一个数组 <code>points</code> 和一个整数 <code>k</code> 。数组中每个元素都表示二维平面上的点的坐标，并按照横坐标 x 的值从小到大排序。也就是说 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> ，并且在 <code>1 &lt;= i &lt; j &lt;= points.length</code> 的前提下， <code>x<sub>i</sub> &lt; x<sub>j</sub></code> 总成立。</p>\n\n<p>请你找出<em> </em><code>y<sub>i</sub>&nbsp;+ y<sub>j</sub>&nbsp;+ |x<sub>i</sub>&nbsp;- x<sub>j</sub>|</code> 的 <strong>最大值</strong>，其中 <code>|x<sub>i</sub>&nbsp;- x<sub>j</sub>|&nbsp;&lt;= k</code> 且 <code>1 &lt;= i &lt; j &lt;= points.length</code>。</p>\n\n<p>题目测试数据保证至少存在一对能够满足 <code>|x<sub>i</sub>&nbsp;- x<sub>j</sub>|&nbsp;&lt;= k</code> 的点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>前两个点满足 |x<sub>i</sub>&nbsp;- x<sub>j</sub>| &lt;= 1 ，代入方程计算，则得到值 3 + 0 + |1 - 2| = 4 。第三个和第四个点也满足条件，得到值 10 + -10 + |5 - 6| = 1 。\n没有其他满足条件的点，所以返回 4 和 1 中最大的那个。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>points = [[0,0],[3,0],[9,2]], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>只有前两个点满足 |x<sub>i</sub>&nbsp;- x<sub>j</sub>| &lt;= 3 ，代入方程后得到值 0 + 0 + |0 - 3| = 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= points.length &lt;= 10^5</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10^8&nbsp;&lt;= points[i][0], points[i][1] &lt;= 10^8</code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10^8</code></li>\n\t<li>对于所有的<code>1 &lt;= i &lt; j &lt;= points.length</code> ，<code>points[i][0] &lt; points[j][0]</code> 都成立。也就是说，<code>x<sub>i</sub></code> 是严格递增的。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findMaxValueOfEquation(int[][] points, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findMaxValueOfEquation(self, points, k):\n        \"\"\"\n        :type points: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint findMaxValueOfEquation(int** points, int pointsSize, int* pointsColSize, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindMaxValueOfEquation(int[][] points, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} points\n * @param {number} k\n * @return {number}\n */\nvar findMaxValueOfEquation = function(points, k) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} points\n# @param {Integer} k\n# @return {Integer}\ndef find_max_value_of_equation(points, k)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMaxValueOfEquation(_ points: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMaxValueOfEquation(points [][]int, k int) int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMaxValueOfEquation(points: Array[Array[Int]], k: Int): Int = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMaxValueOfEquation(points: Array<IntArray>, k: Int): Int {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_max_value_of_equation(points: Vec<Vec<i32>>, k: i32) -> i32 {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $k\n     * @return Integer\n     */\n    function findMaxValueOfEquation($points, $k) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function findMaxValueOfEquation(points: number[][], k: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-max-value-of-equation points k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n\n  )"}],"testcase":"[[1,3],[2,0],[5,10],[6,-10]]\n1","testable":true,"templateMeta":{"name":"findMaxValueOfEquation","params":[{"name":"points","type":"integer[][]"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}